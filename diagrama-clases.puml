@startuml Sistema de Adopci√≥n de Veterinaria

!define ENTITY_COLOR #E8F5E9
!define DAO_COLOR #E3F2FD
!define CONTROLLER_COLOR #FFF3E0
!define VIEW_COLOR #F3E5F5
!define SERVICE_COLOR #FFEBEE
!define UTIL_COLOR #E0F2F1

' Entidades del Modelo
package "modelo" <<Rectangle>> {
    class Empleado <<Entity>> {
        - id: Long
        - nombre: String
        - email: String
        - contrasena: String
        + getId(): Long
        + setId(Long): void
        + getNombre(): String
        + setNombre(String): void
        + getEmail(): String
        + setEmail(String): void
        + getContrasena(): String
        + setContrasena(String): void
    }
    
    class Mascota <<Entity>> {
        - id: Long
        - nombre: String
        - tipo: String
        - peso: double
        + Mascota()
        + Mascota(nombre: String, tipo: String, peso: double)
        + getId(): Long
        + setId(Long): void
        + getNombre(): String
        + setNombre(String): void
        + getTipo(): String
        + setTipo(String): void
        + getPeso(): double
        + setPeso(double): void
    }
    
    class Adoptante <<Entity>> {
        - id: Long
        - nombre: String
        - edad: int
        - direccion: String
        - email: String
        - telefono: String
        + Adoptante(nombre: String, edad: int, direccion: String)
        + getId(): Long
        + setId(Long): void
        + getNombre(): String
        + setNombre(String): void
        + getEdad(): int
        + setEdad(int): void
        + getDireccion(): String
        + setDireccion(String): void
        + getEmail(): String
        + setEmail(String): void
        + getTelefono(): String
        + setTelefono(String): void
    }
    
    class Adopcion <<Entity>> {
        - id: Long
        - adoptante: Adoptante
        - mascota: Mascota
        - empleado: Empleado
        - fechaAdopcion: LocalDateTime
        + Adopcion(adoptante: Adoptante, mascota: Mascota, empleado: Empleado)
        + getId(): Long
        + setId(Long): void
        + getAdoptante(): Adoptante
        + getMascota(): Mascota
        + getEmpleado(): Empleado
        + getFechaAdopcion(): LocalDateTime
        + getRecomendaciones(): String
    }
}

' DAOs
package "dao" <<Rectangle>> {
    class ConexionBD <<Singleton>> {
        - {static} instancia: ConexionBD
        - {static} URL: String
        - {static} USUARIO: String
        - {static} CONTRASENA: String
        - ConexionBD()
        + {static} obtenerInstancia(): ConexionBD
        + obtenerConexion(): Connection
        - inicializarBD(): void
    }
    
    class EmpleadoDAO <<DAO>> {
        - conexionBD: ConexionBD
        + buscarPorEmail(email: String): Empleado
        + guardar(empleado: Empleado): Empleado
    }
    
    class MascotaDAO <<DAO>> {
        - conexionBD: ConexionBD
        + buscarTodas(): List<Mascota>
        + buscarPorId(id: Long): Mascota
        + guardar(mascota: Mascota): Mascota
    }
    
    class AdoptanteDAO <<DAO>> {
        - conexionBD: ConexionBD
        + guardar(adoptante: Adoptante): Adoptante
    }
    
    class AdopcionDAO <<DAO>> {
        - conexionBD: ConexionBD
        + guardar(adopcion: Adopcion): Adopcion
    }
}

' Controladores
package "controlador" <<Rectangle>> {
    class LoginControlador <<Controller>> {
        - empleadoDAO: EmpleadoDAO
        - sesionServicio: SesionServicio
        + iniciarSesion(email: String, contrasena: String): boolean
        + registrarEmpleado(nombre: String, email: String, contrasena: String): String
    }
    
    class AdopcionControlador <<Controller>> {
        - mascotaDAO: MascotaDAO
        - adoptanteDAO: AdoptanteDAO
        - adopcionDAO: AdopcionDAO
        - sesionServicio: SesionServicio
        + obtenerMascotasDisponibles(): List<Mascota>
        + registrarMascota(nombre: String, tipo: String, peso: double): String
        + procesarAdopcion(mascotaId: Long, nombreAdoptante: String, edadAdoptante: int, direccionAdoptante: String, emailAdoptante: String, telefonoAdoptante: String): ResultadoAdopcion
    }
    
    class ResultadoAdopcion <<Inner>> {
        - exitoso: boolean
        - mensaje: String
        - adopcion: Adopcion
        + ResultadoAdopcion(exitoso: boolean, mensaje: String)
        + ResultadoAdopcion(exitoso: boolean, mensaje: String, adopcion: Adopcion)
        + isExitoso(): boolean
        + getMensaje(): String
        + getAdopcion(): Adopcion
    }
}

' Vistas
package "vista" <<Rectangle>> {
    class VentanaLogin <<View>> {
        - txtEmail: JTextField
        - txtContrasena: JPasswordField
        - loginControlador: LoginControlador
        + VentanaLogin()
        - inicializarComponentes(): void
        - accionLogin(): void
        - mostrarVentanaRegistro(): void
    }
    
    class VentanaRegistro <<View>> {
        - txtNombre: JTextField
        - txtEmail: JTextField
        - txtContrasena: JPasswordField
        - txtConfirmarContrasena: JPasswordField
        - loginControlador: LoginControlador
        + VentanaRegistro()
        - inicializarComponentes(): void
        - accionRegistrar(): void
    }
    
    class VentanaPrincipal <<View>> {
        - adopcionControlador: AdopcionControlador
        - sesionServicio: SesionServicio
        - modeloTabla: DefaultTableModel
        + VentanaPrincipal()
        - inicializarComponentes(): void
        - crearPanelListadoMascotas(): JPanel
        - crearPanelRegistroMascota(): JPanel
        - crearPanelAdopcion(): JPanel
        - actualizarTablaMascotas(): void
    }
    
    class VentanaTicket <<View>> {
        - adopcion: Adopcion
        + VentanaTicket(adopcion: Adopcion)
        - inicializarComponentes(): void
        - crearPanelTicket(): JPanel
        - imprimir(): void
    }
}

' Servicios
package "servicio" <<Rectangle>> {
    class SesionServicio <<Singleton>> {
        - {static} instancia: SesionServicio
        - empleadoActual: Empleado
        + {static} obtenerInstancia(): SesionServicio
        + iniciarSesion(empleado: Empleado): void
        + cerrarSesion(): void
        + getEmpleadoActual(): Empleado
        + haySesionActiva(): boolean
    }
}

' Utilidades
package "util" <<Rectangle>> {
    class EncriptadorContrasena <<Utility>> {
        + {static} encriptar(contrasena: String): String
        - {static} bytesToHex(bytes: byte[]): String
    }
}

' Excepciones
package "excepciones" <<Rectangle>> {
    class AdopcionException <<Exception>> {
        + AdopcionException(mensaje: String)
    }
    
    class DatosInvalidosException <<Exception>> {
        + DatosInvalidosException(mensaje: String)
    }
    
    class NombreInvalidoException <<Exception>> {
        + NombreInvalidoException(mensaje: String)
    }
}

' Clase Main
class Main <<Main>> {
    + {static} main(args: String[]): void
}

' Relaciones entre entidades
Adopcion --> Adoptante : tiene
Adopcion --> Mascota : tiene
Adopcion --> Empleado : registrada por

' Relaciones con DAOs
EmpleadoDAO ..> Empleado : persiste
MascotaDAO ..> Mascota : persiste
AdoptanteDAO ..> Adoptante : persiste
AdopcionDAO ..> Adopcion : persiste
EmpleadoDAO --> ConexionBD : usa
MascotaDAO --> ConexionBD : usa
AdoptanteDAO --> ConexionBD : usa
AdopcionDAO --> ConexionBD : usa

' Relaciones con Controladores
LoginControlador --> EmpleadoDAO : usa
LoginControlador --> SesionServicio : usa
LoginControlador --> EncriptadorContrasena : usa
AdopcionControlador --> MascotaDAO : usa
AdopcionControlador --> AdoptanteDAO : usa
AdopcionControlador --> AdopcionDAO : usa
AdopcionControlador --> SesionServicio : usa
AdopcionControlador ..> ResultadoAdopcion : crea

' Relaciones con Vistas
VentanaLogin --> LoginControlador : usa
VentanaRegistro --> LoginControlador : usa
VentanaPrincipal --> AdopcionControlador : usa
VentanaPrincipal --> SesionServicio : usa
VentanaTicket --> Adopcion : muestra
Main ..> VentanaLogin : inicia

' Estilos
skinparam class {
    BackgroundColor<<Entity>> ENTITY_COLOR
    BackgroundColor<<DAO>> DAO_COLOR
    BackgroundColor<<Controller>> CONTROLLER_COLOR
    BackgroundColor<<View>> VIEW_COLOR
    BackgroundColor<<Service>> SERVICE_COLOR
    BackgroundColor<<Utility>> UTIL_COLOR
    BackgroundColor<<Exception>> #FFCDD2
    BackgroundColor<<Main>> #C8E6C9
    BackgroundColor<<Singleton>> #FFE0B2
    BackgroundColor<<Inner>> #F0F4C3
}

@enduml